plugins {
    id 'java'
    id 'java-library'
    id 'org.springframework.boot' version '2.4.4'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    //    id 'org.jetbrains.kotlin.jvm' version '1.4.32-release-380'
}

group 'dev.andersoncontreira'
version '1.0-SNAPSHOT'
sourceCompatibility = '1.8'

apply plugin: 'java'
apply plugin: 'io.spring.dependency-management'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0',
            'org.springframework.boot:spring-boot-starter-test'

    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'

    compile ('org.springframework.boot:spring-boot-starter') {
        exclude module: 'spring-boot-starter-logging'
    }
    compile ('org.springframework.boot:spring-boot-starter-web') {
        exclude module: 'spring-boot-starter-logging'
    }

//            'org.jetbrains.kotlin:kotlin-stdlib-jdk8',

            //Gson
    compile  'com.google.code.gson:gson:2.8.5',

            //logs
            'org.slf4j:slf4j-api:1.7.25',
            'org.slf4j:slf4j-simple:1.7.13',

            // log appender
            'org.eclipse.ecf:org.apache.log4j:1.2.15.v201012070815',

            //log4j to json
            'net.logstash.log4j:jsonevent-layout:1.7',

            //hibernate
            'org.hibernate:hibernate-core:5.3.2.Final',

            //mysql connector
            'mysql:mysql-connector-java:8.0.17'

}



test {
    useJUnitPlatform()
}

//compileKotlin {
//    kotlinOptions {
//        jvmTarget = "1.8"
//    }
//}
//compileTestKotlin {
//    kotlinOptions {
//        jvmTarget = "1.8"
//    }
//}

//create jar for the source
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    //baseName = project.name.replace(version,"") + '-full'
    archiveName = 'training-full.jar'
//    mainClassName = 'dev.andersoncontreira.trainingddd.application.Application'

    manifest {
        attributes 'Implementation-Title': ' Training',
                'Implementation-Version': version,
                'Main-Class': 'dev.andersoncontreira.trainingddd.application.Application'
    }

    doFirst {
        from {
            configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
        }
    }

    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'

    with jar
}

bootJar {
    mainClassName = 'dev.andersoncontreira.trainingddd.application.Application'
}

//Atualizar
//https://discuss.gradle.org/t/need-help-with-building-an-executable-jar-that-can-be-published-to-maven-local-repo-with-publishtomavenlocal-spring-boot-project/35829
//create jar for the doc
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}
