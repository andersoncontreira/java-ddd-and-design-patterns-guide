plugins {
	id 'org.springframework.boot' version '2.4.5'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}

group = 'dev.andersoncontreira'
version = '1.0.0-SNAPSHOT'
sourceCompatibility = '1.8'

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

ext {
	String testType = "unit"
}

repositories {
	mavenCentral()
}

// A resolvable configuration to collect test reports data
configurations {
	antJUnit
}

dependencies {
	implementation fileTree(dir: 'libs', include: ['*.jar'])
	implementation ('org.springframework.boot:spring-boot-starter-web') {
		exclude module: 'spring-boot-starter-logging'
	}
	implementation('org.springframework.boot:spring-boot-starter-thymeleaf') {
		exclude module: 'spring-boot-starter-logging'
	}

	implementation 'com.google.code.gson:gson:2.8.5',

			// spark with pc4j security package
			'org.pac4j:spark-pac4j:2.2.0',

			//'org.jetbrains.kotlin:kotlin-stdlib-jdk8',

			//reflection
			'org.reflections:reflections:0.9.11',

			//logs
			'org.slf4j:slf4j-api:1.7.25',
			'org.slf4j:slf4j-simple:1.7.13',

			// log appender
			'org.eclipse.ecf:org.apache.log4j:1.2.15.v201012070815',

			//log4j to json
			'net.logstash.log4j:jsonevent-layout:1.7',

			//hibernate
			'org.hibernate:hibernate-core:5.4.31.Final',
			//how-to-resolve-java-lang-noclassdeffounderror-javax-xml-bind-jaxbexception
			'javax.xml.bind:jaxb-api:2.3.1',
			//could-not-get-constructor-for-org-hibernate-persister-entity-singletableentitype
			'org.javassist:javassist:3.25.0-GA',

			//mysql connector
			'mysql:mysql-connector-java:8.0.17',

			//javax.validation
			'javax.validation:validation-api:2.0.1.Final',
			// validator
			'commons-validator:commons-validator:1.4.0',

			// Object Utils
			'org.apache.commons:commons-lang3:3.4',
			// File Filter
			'org.apache.commons:commons-io:1.3.2'


	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	antJUnit 'org.apache.ant:ant-junit:1.9.7'
}

test {
	useJUnitPlatform()
}

tasks.register('unitTestReport', TestReport) {
	def testType = "unit"
	// html reports
	reporting.baseDir = "$buildDir/target/" + testType


	dependsOn tasks.test {
		filter {
			includeTestsMatching testType + ".*"
		}

		reports {
			html.enabled = true
			junitXml.outputLocation.set(layout.buildDirectory.dir(reporting.baseDir.toString()))
			html.outputLocation.set(layout.buildDirectory.dir(reporting.baseDir.toString()+"/coverage_html"))
//			print(html.outputLocation.get())
		}

		doLast {
			ant.taskdef(name: 'junitreport',
					classname: 'org.apache.tools.ant.taskdefs.optional.junit.XMLResultAggregator',
					classpath: configurations.antJUnit.asPath)

			ant.junitreport(todir: reporting.baseDir, tofile: "report.xml") {
				fileset(dir: reporting.baseDir, includes: 'TEST-*.xml')
				//report(todir: file(reporting.baseDir.toString() + "/report"), format: 'frames')
			}
		}
	}
}

//TODO estudar forma para não repetir logica
tasks.register('componentTestReport', TestReport) {
	def testType = "component"
	// html reports
	reporting.baseDir = "$buildDir/target/" + testType


	dependsOn tasks.test {
		filter {
			includeTestsMatching testType + ".*"
		}

		reports {
			html.enabled = true
			junitXml.outputLocation.set(layout.buildDirectory.dir(reporting.baseDir.toString()))
			html.outputLocation.set(layout.buildDirectory.dir(reporting.baseDir.toString()+"/coverage_html"))
//			print(html.outputLocation.get())
		}

		doLast {
			ant.taskdef(name: 'junitreport',
					classname: 'org.apache.tools.ant.taskdefs.optional.junit.XMLResultAggregator',
					classpath: configurations.antJUnit.asPath)

			ant.junitreport(todir: reporting.baseDir, tofile: "report.xml") {
				fileset(dir: reporting.baseDir, includes: 'TEST-*.xml')
				//report(todir: file(reporting.baseDir.toString() + "/report"), format: 'frames')
			}
		}
	}
}


//TODO estudar forma para não repetir logica
tasks.register('integrationTestReport', TestReport) {
	def testType = "integration"
	// html reports
	reporting.baseDir = "$buildDir/target/" + testType


	dependsOn tasks.test {
		filter {
			includeTestsMatching testType + ".*"
		}

		reports {
			html.enabled = true
			junitXml.outputLocation.set(layout.buildDirectory.dir(reporting.baseDir.toString()))
			html.outputLocation.set(layout.buildDirectory.dir(reporting.baseDir.toString()+"/coverage_html"))
//			print(html.outputLocation.get())
		}

		doLast {
			ant.taskdef(name: 'junitreport',
					classname: 'org.apache.tools.ant.taskdefs.optional.junit.XMLResultAggregator',
					classpath: configurations.antJUnit.asPath)

			ant.junitreport(todir: reporting.baseDir, tofile: "report.xml") {
				fileset(dir: reporting.baseDir, includes: 'TEST-*.xml')
				//report(todir: file(reporting.baseDir.toString() + "/report"), format: 'frames')
			}
		}
	}
}

jar {
	enabled = true
	manifest {
		attributes "Main-Class": "dev.andersoncontreira.trainingddd.application.Application"
	}

	configurations.implementation.setCanBeResolved(true)
	from {
		configurations.implementation.collect { it.isDirectory() ? it : zipTree(it) }
	}

	exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA BOOT-INF/*.*'

}
/**
 * Depends of jar to build a complete file
 * TODO Está duplicando as dependencias
 */
bootJar {
	enabled = true
	mainClass = 'dev.andersoncontreira.trainingddd.application.Application'
	with jar
}

bootRun {
	optimizedLaunch = false
}